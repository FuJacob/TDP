pipeline {
    // Run on any available agent
    agent any

    // Define environment variables
    environment {
        BRANCH_NAME = 'feat_tdp_205'
        DOCKER_REGISTRY = 'docker.io/lli453' // e.g., 'docker.io/your-username'
        // Define Docker credentials ID configured in Jenkins
        DOCKER_CREDENTIALS = '858b040b-9946-4470-a9c4-849080dc304c'
        // Get commit hash for tagging
        GIT_COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }

    tools {
        nodejs('23.10.0')
    }

    // Configure pipeline options
    options {
        // Timeout for the entire pipeline
        timeout(time: 1, unit: 'HOURS')
        // Don't allow concurrent builds
        disableConcurrentBuilds()
        skipDefaultCheckout()
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        // Checkout the repository
                        checkout scm

                        // Switch to the required branch
                        sh 'git checkout ${BRANCH_NAME}'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Failed to checkout repository: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Install Poetry') {
            steps {
                echo 'Installing Poetry...'
                sh '''
                curl - sSL https://install.python-poetry.org | python3 -
                export PATH = /var/jenkins_home /.local / bin: $PATH
                poetry--version
                '''
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    try {
                        sh '''
                        npm ci
                        pip install flake8
                        '''
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Failed to install dependencies: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Lint') {
            steps {
                script {
                    try {
                        sh 'npm run lint'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Linting failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    try {
                        // Run tests
                        // sh 'npm run test'
                        echo 'Bypassing test stage for demo purposes'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Tests failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo ${DOCKER_PASS} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USER} --password-stdin"
                    }
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Backend') {
                    steps {
                        script {
                            try {
                                sh """
                                docker build -t ${DOCKER_REGISTRY}/backend:${GIT_COMMIT_HASH} \
                                           -f cicd/tdp205/Dockerfile.backend .
                                """
                            } catch (Exception e) {
                                currentBuild.result = 'FAILURE'
                                error "Backend Docker build failed: ${e.getMessage()}"
                            }
                        }
                    }
                }
                
                stage('Build Frontend') {
                    steps {
                        script {
                            try {
                                sh """
                                docker build -t ${DOCKER_REGISTRY}/frontend:${GIT_COMMIT_HASH} \
                                           -f cicd/tdp205/Dockerfile.frontend .
                                """
                            } catch (Exception e) {
                                currentBuild.result = 'FAILURE'
                                error "Frontend Docker build failed: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    try {
                        // Push backend images
                        sh """
                        docker push ${DOCKER_REGISTRY}/backend:${GIT_COMMIT_HASH}
                        """
                        
                        // Push frontend images
                        sh """
                        docker push ${DOCKER_REGISTRY}/frontend:${GIT_COMMIT_HASH}
                        """
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Failed to push Docker images: ${e.getMessage()}"
                    }
                }
            }
        }

    }

    // Post-build actions
    post {
        always {
            sh 'docker logout ${DOCKER_REGISTRY}'
            // Clean workspace after build
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
