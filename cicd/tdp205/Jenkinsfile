// define image names dynamically using commit SHA
def DOCKER_IMAGE_BACKEND = "nebulaakamrul/backend-service:${env.GIT_COMMIT}"
def DOCKER_IMAGE_FRONTEND = "nebulaakamrul/frontend-service:${env.GIT_COMMIT}"

pipeline {
    agent any

    environment {
        DOCKER_HUB_USERNAME = 'nebulaakamrul'
    }

    stages {
        stage('Docker Build - Backend') {
            steps {
                dir('cicd/tdp205') {
                    script {
                        sh "docker build -f Dockerfile.backend -t ${DOCKER_IMAGE_BACKEND} ../.."
                    }
                }
            }
        }

        stage('Docker Push - Backend') {
            when {
                branch 'main' 
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'docker-hub-token', variable: 'DOCKER_HUB_PASSWORD')]) {
                        sh """
                            echo $DOCKER_HUB_PASSWORD | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
                            docker push ${DOCKER_IMAGE_BACKEND}
                        """
                    }
                }
            }
        }

        stage('Docker Build - Frontend') {
            steps {
                dir('cicd/tdp205') {
                    script {
                        sh "docker build -f Dockerfile.frontend -t ${DOCKER_IMAGE_FRONTEND} ../.."
                    }
                }
            }
        }

        stage('Docker Push - Frontend') {
            when {
                branch 'main'
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'docker-hub-token', variable: 'DOCKER_HUB_PASSWORD')]) {
                        sh """
                            echo $DOCKER_HUB_PASSWORD | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
                            docker push ${DOCKER_IMAGE_FRONTEND}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution finished.'
            cleanWs()
        }
    }
}
